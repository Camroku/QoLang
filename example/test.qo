#!/usr/local/bin/qo
println("QoLang test");
println("-------------------------------");

/*
Including, printing, input and if-elif-else statements
*/

include testlib as test;
include testpylib;
include qo;
include types;

println("commands:");
println("  1  print 'Hello, world!'");
println("  2  print 'Hello, QoLang!'");
println("  3  print 'Hello, Camroku.TECH!'");
inp = types.toInt(input("> "));
exitcode = test.print_text(inp);
println("Exit code for previous function:", exitcode);
if(exitcode == 0){
    println("Successful");
} else {
    println("Unsuccessful");
}
testpylib.test();

println("-------------------------------");
/*
Get type of something
*/

test1 = 123;
test2 = "hello";
test3 = True;
test4 = 3.14;

println(test1, "->", types.type(test1));
println(test2, "->", types.type(test2));
println(test3, "->", types.type(test3));
println(test4, "->", types.type(test4));

println("-------------------------------");
/*
Loops
*/

print("Some numbers printed with for loop: ");
for(i = 0; i < 5; i = i + 1){
    print(i);
}
println("");

print("Some numbers printed with while loop: ");
i = 0;
while(i < 5){
    print(i);
    i = i + 1;
}
println("");

print("Some numbers printed with times loop: ");
i = 0;
times 5{
    print(i);
    i = i + 1;
}
println("");


print("Some numbers printed with times as loop: ");
times 5 as &i{
    print(i);
}
println("");


print("Some numbers printed with foreach loop: ");
numbers = [0, 1, 2, 3, 4];
foreach &num in numbers{
    print(num);
}
println("");

println("-------------------------------");
/*
`&&` and `||` boolean operators
*/

btest1 = types.toInt(input("Enter a number: "));

if(btest1 >= 1 && btest1 <= 10){
    println("Your number is between 1 and 10.");
} else {
    println("Your number is not between 1 and 10.");
}

btest2 = types.toInt(input("Enter a number: "));

if(btest2 >= 20 || btest2 <= 10){
    println("Your number is bigger than 20 or smaller than 10.");
} else {
    println("Your number is not bigger than 20 or smaller than 10.");
}

println("-------------------------------");
/*
Formatted strings
*/

testvar = "test variable content";

println(%"All these text are printed with a single println function.\n" +
        %"This is another line printed with \\n.\n" +
        %"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\r" +
        %"This text is printed after a lot of characters using \\r \n" +
        "This text will not be formatted. \rTest" + %"\n" +
        %"This is a variable used in a fstring: $testvar\n" +
        %"This is an escaped variable: \$testvar");

println("-------------------------------");
/*
Lists
*/

println("You'll enter 3 values that are going to be added to a list.");

list = [];
times 3 as &valn{
    list += [input(%"Number $valn: ")];
}

println("List:", list);
println("list[1]:", list[1]);
println("Setting list[0] to 45...");
list[0] = 45;
println("List:", list);
list += [20];
println("Added 20 to the list:", list);

println("-------------------------------");
/*
All ways to get something from a list
*/
println("All ways to get something from a list");

list = [];
times 32 as &valn{
    list += [valn];
} /* 0, 1, 2, ..., 29, 30, 31 */

print("1: ");
println(list[3]);
print("2: ");
println(list[3:]);
print("3: ");
println(list[3:13]);
print("4: ");
println(list[3::2]);
print("5: ");
println(list[3:13:2]);
print("6: ");
println(list[:13]);
print("7: ");
println(list[::2]);
print("8: ");
println(list[:13:2]);

println("-------------------------------");
/*
None
*/

println("This is nothing:", None);

println("-------------------------------");
/*
Define
*/

define SOMETHING;

println("This is a variable created with define statement:", SOMETHING);
println(%"SOMETHING == \"SOMETHING\":", SOMETHING == "SOMETHING");

println("-------------------------------");
/*
Command line arguments
*/

println("Arguments:", qo.args);

println("-------------------------------");
/*
QCF Library
*/

include qcf;

println("Opening test.qcf");
qcf.new("test.qcf", &testqcf);
println("A variable from test.qcf:", testqcf.get("mypassword"));
println("Length of a variable from test.qcf:", len(testqcf.get("mypassword")));
println("Setting a variable..");
testqcf.set("mypassword", "newValue");
println("A variable from test.qcf:", testqcf.get("mypassword"));
println("Moving testqcf to qcftest..");
move(&testqcf, &qcftest);
println("Does qcftest have an attribute named set?", hasAttr(&qcftest, "set"));
println("Does qcftest have an attribute named hello?", hasAttr(&qcftest, "hello"));

println("-------------------------------");
/*
Stack Library
*/

include stack;

times 5 {
    myVariable = input("Enter a variable: ");
    stack.push(&myVariable);
    println("Pushed myVariable");
}

println("Stack:", stack.get(&myVariable));

times 5 {
    stack.pop(&myVariable);
    println("Popped myVariable:", myVariable);
}

println("-------------------------------");
/*
Dictionaries
*/

abc = {
    "abc": "def",
    "ghi": "jkl"
};

println("abc['ghi']:", abc["ghi"]);
println("Items of abc:", types.dictItems(abc));
println("Keys of abc:", types.dictKeys(abc));
println("Values of abc:", types.dictValues(abc));

println("-------------------------------");
/*
Nested lists and dictionaries
*/

nlist = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];

println("nlist[1][1]:", nlist[1][1]);

ndict = {
    "a": {
        "b": {
            "c": "d"
        }
    }
};

println("ndict['a']['b']['c']:", ndict["a"]["b"]["c"]);
